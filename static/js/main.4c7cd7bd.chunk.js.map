{"version":3,"sources":["components/FilterComponent.jsx","App.js","reportWebVitals.js","index.js"],"names":["FilterComponent","props","state","randomWords","currentWords","letterFilter","filteredWordList","this","map","word","lowerCaseWord","toLowerCase","includes","setState","wordList","className","onClick","filterButtonHandler","id","resetButtonHandler","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gRAGqBA,G,wDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTC,YAAa,CACT,OACA,SACA,UACA,aACA,aACA,SACA,UACA,QACA,cACA,OACA,SACA,SACA,MACA,OACA,UACA,MACA,SACA,YACA,QACA,WAEJC,aAAc,CACV,OACA,SACA,UACA,aACA,aACA,SACA,UACA,QACA,cACA,OACA,SACA,SACA,MACA,OACA,UACA,MACA,SACA,YACA,QACA,YA9CO,E,gEAkDCC,GAAe,IAG3BC,EAFoBC,KAAKL,MAArBC,YAE2BK,KAAI,SAAAC,GACnC,IAAMC,EAAgBD,EAAKE,cAE3B,IAAKD,EAAcE,SAASP,GACxB,OAAOK,KAIfH,KAAKM,SAAS,CAAET,aAAcE,M,2CAI9BC,KAAKM,SAAS,CAAET,aAAcG,KAAKL,MAAMC,gB,+BAGnC,IAAD,OAICW,EAFmBP,KAAKL,MAAtBE,aAEsBI,KAAI,SAAAC,GAE9B,GAAIA,EACA,OAAO,4BAAIA,OAInB,OACI,sBAAKM,UAAU,kBAAf,UACI,sBAAKA,UAAU,gBAAf,UACI,wBAAQA,UAAU,eAAeC,QAAS,kBAAM,EAAKC,oBAAoB,MAAzE,eACA,wBAAQF,UAAU,eAAeC,QAAS,kBAAM,EAAKC,oBAAoB,MAAzE,eACA,wBAAQF,UAAU,eAAeC,QAAS,kBAAM,EAAKC,oBAAoB,MAAzE,eACA,wBAAQC,GAAG,cAAcF,QAAS,kBAAM,EAAKG,sBAA7C,sBAEHL,S,GAxF4BM,cCQ9BC,MARf,WACE,OACE,qBAAKN,UAAU,MAAf,SACE,cAAC,EAAD,OCMSO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4c7cd7bd.chunk.js","sourcesContent":["import { Component } from \"react\";\r\nimport \"./FilterComponent.css\";\r\n\r\nexport default class FilterComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            randomWords: [\r\n                'view',\r\n                'bishop',\r\n                'pudding',\r\n                'wilderness',\r\n                'obligation',\r\n                'option',\r\n                'average',\r\n                'sheep',\r\n                'orientation',\r\n                'pier',\r\n                'clique',\r\n                'orange',\r\n                'art',\r\n                'shot',\r\n                'freight',\r\n                'cow',\r\n                'formal',\r\n                'operation',\r\n                'deter',\r\n                'horizon'\r\n            ],\r\n            currentWords: [\r\n                'view',\r\n                'bishop',\r\n                'pudding',\r\n                'wilderness',\r\n                'obligation',\r\n                'option',\r\n                'average',\r\n                'sheep',\r\n                'orientation',\r\n                'pier',\r\n                'clique',\r\n                'orange',\r\n                'art',\r\n                'shot',\r\n                'freight',\r\n                'cow',\r\n                'formal',\r\n                'operation',\r\n                'deter',\r\n                'horizon'],\r\n        };\r\n    }\r\n\r\n    filterButtonHandler(letterFilter) {\r\n        const { randomWords } = this.state;\r\n\r\n        let filteredWordList = randomWords.map(word => {\r\n            const lowerCaseWord = word.toLowerCase();\r\n\r\n            if (!lowerCaseWord.includes(letterFilter)) {\r\n                return lowerCaseWord;\r\n            }\r\n        });\r\n\r\n        this.setState({ currentWords: filteredWordList });\r\n    }\r\n\r\n    resetButtonHandler() {\r\n        this.setState({ currentWords: this.state.randomWords });\r\n    }\r\n\r\n    render() {\r\n\r\n        const { currentWords } = this.state;\r\n\r\n        const wordList = currentWords.map(word => {\r\n            //Doing this to elimate blank <p> tags being made from there being nulls in the array\r\n            if (word) {\r\n                return <p>{word}</p>\r\n            }\r\n        });\r\n\r\n        return (\r\n            <div className=\"filterContainer\">\r\n                <div className=\"filterButtons\">\r\n                    <button className=\"filterButton\" onClick={() => this.filterButtonHandler('u')}>U</button>\r\n                    <button className=\"filterButton\" onClick={() => this.filterButtonHandler('t')}>T</button>\r\n                    <button className=\"filterButton\" onClick={() => this.filterButtonHandler('o')}>O</button>\r\n                    <button id=\"resetButton\" onClick={() => this.resetButtonHandler()}>Reset</button>\r\n                </div>\r\n                {wordList}\r\n            </div>\r\n\r\n        );\r\n    }\r\n}","import './App.css';\r\nimport FilterComponent from './components/FilterComponent';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <FilterComponent/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}